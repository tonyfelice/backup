{
  "active": false,
  "connections": {
    "find binaries": {
      "main": [
        [
          {
            "node": "split open",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "switch": {
      "main": [
        [
          {
            "node": "image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "plaintext",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "pdf",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "json",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "rtf",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "csv",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "markup",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ods",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "xls",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "xlsx",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "plaintext": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start": {
      "main": [
        [
          {
            "node": "find binaries",
            "type": "main",
            "index": 0
          },
          {
            "node": "merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "json": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "rtf": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "csv": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "markup": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ods": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "xls": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "xlsx": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aggregate": {
      "main": [
        [
          {
            "node": "merge",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "split open": {
      "main": [
        [
          {
            "node": "convert to file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert to file": {
      "main": [
        [
          {
            "node": "extract",
            "type": "main",
            "index": 0
          },
          {
            "node": "uploads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merge": {
      "main": [
        [
          {
            "node": "output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "image": {
      "main": [
        [
          {
            "node": "filedata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract": {
      "main": [
        [
          {
            "node": "aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format": {
      "main": [
        [
          {
            "node": "merge",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "filedata": {
      "main": [
        [
          {
            "node": "extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "uploads": {
      "main": [
        [
          {
            "node": "format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-22T18:49:36.398Z",
  "id": "vShmO2QJW0cxsYrE",
  "isArchived": true,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "CZM: file handler 4.3",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const files = $input.all().at(0)?.binary;\nconst isFilesSent = typeof files === 'object' && Object.keys(files)?.length;\nif(isFilesSent){\n   return { files }\n}\nreturn $input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -144
      ],
      "id": "3897529a-5005-46da-ab6d-1202aa3abb51",
      "name": "find binaries"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "image/",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "2db1ea81-6732-4625-921c-13b3a3b2bc5e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "30c7c3fe-e468-47db-93a2-325210d2256e",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "plain text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "76cafa71-c2db-4e14-8d10-de756ab27377",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pdf"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "45a1038c-1525-4c90-97b0-efe5b30989cc",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/json",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "json"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dc225f42-d378-4a30-a3fe-8f13df36d675",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/rtf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "rtf"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "50bf48c3-a998-4b15-a230-9509b2d84119",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "text/csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "csv"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5c68dba3-a9e7-45ac-ab10-d3bdabc693eb",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/xml",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "xml"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "57e2ada6-62ef-4552-9210-433018a5b52f",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/vnd.oasis.opendocument.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ods"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b777803b-4aac-4e12-81ee-3c283ea26906",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "xls"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "67677bce-a8e8-4586-9b31-ac92fbd66c90",
                    "leftValue": "={{ $('start').item.json.files[$runIndex].mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "xlsx"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -912,
        160
      ],
      "id": "ca9d0e95-b1c9-4b7c-aa6e-cad24c319aad",
      "name": "switch"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "fileBinary",
        "destinationKey": "content",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        304
      ],
      "id": "13e7dd71-30d0-44e3-a9fe-27e1bd7ffa62",
      "name": "plaintext"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "fileBinary",
        "options": {
          "joinPages": true
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        464
      ],
      "id": "24163686-2077-4b62-a568-e39581baac77",
      "name": "pdf"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "binaryPropertyName": "fileBinary",
        "destinationKey": "content",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        624
      ],
      "id": "ab69ec1d-82a6-40c8-bf65-fde13d54b380",
      "name": "json"
    },
    {
      "parameters": {
        "operation": "rtf",
        "binaryPropertyName": "fileBinary",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        784
      ],
      "id": "41029ce1-56db-4b4a-a9f1-7daed43f69fa",
      "name": "rtf"
    },
    {
      "parameters": {
        "binaryPropertyName": "fileBinary",
        "options": {
          "headerRow": true,
          "rawData": false,
          "readAsString": false
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        944
      ],
      "id": "0379a348-b704-4459-b7dc-41067a19826a",
      "name": "csv"
    },
    {
      "parameters": {
        "operation": "xml",
        "binaryPropertyName": "fileBinary",
        "destinationKey": "content",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        1104
      ],
      "id": "b103c215-3cfb-46d5-8a17-7dbc94407808",
      "name": "markup"
    },
    {
      "parameters": {
        "operation": "ods",
        "binaryPropertyName": "fileBinary",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        1264
      ],
      "id": "2999ab4e-bd76-4404-af66-132e8ba8485b",
      "name": "ods"
    },
    {
      "parameters": {
        "operation": "xls",
        "binaryPropertyName": "fileBinary",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        1424
      ],
      "id": "7a2705de-f094-4284-a813-3990708f2f3a",
      "name": "xls"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "fileBinary",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -304,
        1584
      ],
      "id": "36c79ea0-9e3e-429f-a614-521c71f808c2",
      "name": "xlsx"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "sessionId"
            },
            {
              "name": "action"
            },
            {
              "name": "chatInput"
            },
            {
              "name": "files",
              "type": "array"
            },
            {
              "name": "fileData",
              "type": "array"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2128,
        -336
      ],
      "id": "23caadba-f1ae-4b67-a8ef-1308ffb77756",
      "name": "start"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "fileData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        0,
        48
      ],
      "id": "3bc801a8-e279-4455-b0ea-b3dc91984365",
      "name": "aggregate"
    },
    {
      "parameters": {
        "numberInputs": 8
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        208,
        -320
      ],
      "id": "402a9010-5137-4f7b-8ce6-01da0ca22608",
      "name": "merge"
    },
    {
      "parameters": {
        "fieldToSplitOut": "files",
        "options": {
          "includeBinary": true
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1712,
        -144
      ],
      "id": "452a6ef1-a046-4749-8760-5150684e2c56",
      "name": "split open"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "binaryPropertyName": "fileBinary",
        "options": {
          "fileName": "={{ $json.fileName }}",
          "mimeType": "={{ $json.mimeTYpe }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1520,
        -144
      ],
      "id": "ac6cae54-c569-4bc4-a50f-d74bec897067",
      "name": "convert to file"
    },
    {
      "parameters": {
        "jsCode": "// Find the three relevant items in the input array based on their keys\nconst firstItem = $input.all().find(item => item.hasOwnProperty('sessionId'));\nconst uploadsItem = $input.all().find(item => item.hasOwnProperty('uploads'));\nconst fileDataItem = $input.all().find(item => item.hasOwnProperty('fileData') && item.fileData !== null);\n\n// Check if all necessary items were found\nif (firstItem && uploadsItem && fileDataItem) {\n    // Combine the uploads and fileData arrays\n    const combinedFileData = [\n        ...uploadsItem.uploads,\n        ...fileDataItem.fileData\n    ];\n\n    // Assign the new combined array to the first item's fileData property\n    firstItem.fileData = combinedFileData;\n\n    // Return the modified first item as the output\n    return [firstItem];\n} else {\n    // Handle the case where the items were not found or the structure is unexpected\n    throw new Error('Required items (sessionId, uploads, or fileData) not found in input data.');\n}\n\n\n/*\nconst chat = $input.first().json;\nconst allItems = $input.all();\n\nlet folio = null;\nconst fileDataItem = allItems.find(item => {\n  return item.json.fileData !== undefined;\n});\nif (fileDataItem){\n  folio = fileDataItem.json;\n}\nif (!folio.fileData) {\n  folio = $input.last().json;\n}\n\n\nif (!folio.fileData) {\n  folio = $input.last().json;\n}\n\n\n\n\nconst uploadsItem = allItems.find(item => {\n  return item.json.uploads !== undefined;\n});\n\nlet jsonOut;\n\nif (folio != null && folio.fileData) {\n  jsonOut = Object.assign({}, chat, folio); \n  \n  // Create a readable string of the file data to prepend\n  const fileDataString = folio.fileData\n    .map(f => f.content)\n    .join('\\n');\n\n  // Prepend the chatInput with the file data and a clear separator\n  jsonOut.chatInput = `Attached file(s):\\n${fileDataString}\\n\\n${jsonOut.chatInput}`;\n\n} else {\n  jsonOut = chat;\n}\n\nreturn jsonOut;\n\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -224
      ],
      "id": "f1a96c79-0137-4753-b406-d3c0ec21260c",
      "name": "output"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "inputType": "base64",
        "binaryPropertyName": "fileBinary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -304,
        144
      ],
      "id": "406bb57a-e99c-450c-91fc-c1de04378b0a",
      "name": "image",
      "credentials": {
        "openAiApi": {
          "id": "X3Nhu6EWyz9LN2fj",
          "name": "czm-openai"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1264,
        64
      ],
      "id": "bce2ad34-a9b8-4c24-8215-66ac200e08b7",
      "name": "extract"
    },
    {
      "parameters": {
        "content": "pdf = fileData.text",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        464
      ],
      "id": "7a47347c-79b5-4e24-be90-1e63840e3905",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "content",
        "height": 96,
        "width": 176,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        304
      ],
      "id": "4814ac6f-2911-4281-83ef-de40ffd646a7",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "content",
        "height": 96,
        "width": 176,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        624
      ],
      "id": "2f4e8077-4faa-4023-9d9d-75a53d522a21",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "rtf = fileData.???",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        784
      ],
      "id": "38368d7f-de84-427d-954a-647555730424",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "csv = fileData.???",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        944
      ],
      "id": "f3a4915a-e55b-4347-a2f9-0761dc2ab0ae",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "ods = fileData.???",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        1264
      ],
      "id": "93039b42-dd7a-40e3-9b75-e7ea0ae73853",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "content",
        "height": 96,
        "width": 176,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        1104
      ],
      "id": "6b4ed896-5534-464c-b5ce-182f84161f8c",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "xls = fileData.???",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        1424
      ],
      "id": "1c5ae494-83e0-439a-8e2a-dc70be2c936a",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "xlsx = fileData.???",
        "height": 96,
        "width": 176,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        1584
      ],
      "id": "ba1797da-9666-4708-97d8-5dc5397dce55",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "+ handle data in nodes other than content\n+ add url to files[]\n+ add filename to chatInput",
        "height": 96,
        "width": 448,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        416,
        -336
      ],
      "id": "85c4c868-3163-4957-95a6-588da1f36be1",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "jsCode": "\n/*\nconst folio = $('start').item.json.files;\nconst este = $input.all().json;\n\n*/\n\n// Get the uploads and files data\nconst uploads = $input.all().map(el => {\n  const fileUrl = `https://drive.google.com/file/d/${el.json.id}/view`;\n  return { ...el.json, fileUrl };\n});\n\nconst files = $('start').item.json.files;\n\n// Create a map for quick lookup of files by name\nconst filesMap = new Map();\nfiles.forEach(file => {\n  filesMap.set(file.fileName, file);\n});\n\n// Merge the data\nconst objUploads = {\n  \"uploads\": uploads.map(upload => {\n    // Get the file name from the 'name' property\n    const fileName = upload.name;\n    \n    // Find the fileData by checking if the upload name ends with the file name\n    const matchingFile = files.find(file => fileName.endsWith(file.fileName));\n    \n    // If a match is found, merge the objects\n    if (matchingFile) {\n      return {\n        ...upload,\n        ...matchingFile,\n        // Preserve fileUrl by adding it after the fileData spread\n        fileUrl: upload.fileUrl\n      };\n    }\n    // Otherwise, return the original upload object\n    return upload;\n  })\n};\n\n// Return the merged data\nreturn [{ json: objUploads }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -144
      ],
      "id": "b6144fde-bf49-42dd-b345-f76c1cd79a16",
      "name": "format"
    },
    {
      "parameters": {
        "jsCode": "const folio = $('start').item.json.files[$runIndex];\nconst este = $input.item.json;\nlet jsonOut = Object.assign({}, este, folio);\nreturn jsonOut;\n\n\n\n\n\n// Loop over input items and add filename to each one\n/*for (const item of $input.all()) {\n  item.json.fileName = 1;\n}\n\nreturn $input.all();*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        64
      ],
      "id": "6f342915-a7dd-4cc7-80c2-da44d541da0a",
      "name": "filedata"
    },
    {
      "parameters": {
        "inputDataFieldName": "fileBinary",
        "name": "={{ $('start').item.json.sessionId }}-{{ $('split open').item.json.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1fer_5cMknvjYmTxuxavY3WqmvAm671tA",
          "mode": "list",
          "cachedResultName": "chatUploads",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1fer_5cMknvjYmTxuxavY3WqmvAm671tA"
        },
        "options": {
          "simplifyOutput": true
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1312,
        -144
      ],
      "id": "f34f4f30-ffc4-43de-b7c8-e5effa5266b7",
      "name": "uploads",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "hpyRggGv1xon9oys",
          "name": "drive.t@czm"
        }
      }
    }
  ],
  "pinData": {
    "start": [
      {
        "json": {
          "sessionId": "0b6d97115bc24e67abbfae053f3152d9",
          "action": "sendMessage",
          "chatInput": "dsagf",
          "files": [
            {
              "fileName": "testfile.txt",
              "fileSize": "18 bytes",
              "fileExtension": "txt",
              "fileType": "text",
              "mimeType": "text/plain"
            },
            {
              "fileName": "testsheet .csv",
              "fileSize": "98 bytes",
              "fileExtension": "csv",
              "fileType": "text",
              "mimeType": "text/csv"
            }
          ],
          "fileData": null
        }
      }
    ]
  },
  "repo_name": "backup",
  "repo_owner": "tonyfelice",
  "repo_path": "n8/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-22T18:49:36.405Z",
      "updatedAt": "2025-08-22T18:49:36.405Z",
      "role": "workflow:owner",
      "workflowId": "vShmO2QJW0cxsYrE",
      "projectId": "7oc82U5FbxHgMZLy"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-21T23:30:26.930Z",
      "updatedAt": "2025-08-21T23:30:26.930Z",
      "id": "TC6GN8ukWr58QCW8",
      "name": "dev"
    },
    {
      "createdAt": "2025-08-21T23:38:12.196Z",
      "updatedAt": "2025-08-21T23:38:12.196Z",
      "id": "UZgBu3fbi0GQ3tgi",
      "name": "working"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-08-22T23:49:25.000Z",
  "versionId": "7f45366b-3fa6-40bd-92d7-3d9074b605c5"
}