{
  "active": false,
  "connections": {
    "get calendar": {
      "main": [
        [
          {
            "node": "busy slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "avail slots": {
      "main": [
        []
      ]
    },
    "blocked?": {
      "main": [
        [
          {
            "node": "avail slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "block slot": {
      "main": [
        [
          {
            "node": "possible - busy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "possible slots": {
      "main": [
        [
          {
            "node": "possible - busy",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "busy slots": {
      "main": [
        [
          {
            "node": "block slot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "possible - busy": {
      "main": [
        [
          {
            "node": "blocked?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start": {
      "main": [
        [
          {
            "node": "get calendar",
            "type": "main",
            "index": 0
          },
          {
            "node": "possible slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-18T19:01:44.480Z",
  "id": "dH9CyWINP2rSoYgH",
  "isArchived": false,
  "meta": null,
  "name": "CZM: suggest availability 1.0",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "t@czm.ai",
          "mode": "list",
          "cachedResultName": "t@czm.ai"
        },
        "returnAll": true,
        "options": {
          "fields": ""
        }
      },
      "id": "c16529df-665e-447c-85e2-ff24345e6128",
      "name": "get calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        -192,
        288
      ],
      "typeVersion": 1.3,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TjfI6pImMD1Cb9xq",
          "name": "czm-n8n-gcal"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const formatted = items.map(item => {\n  const start = item.json.start;\n  const end = item.json.end;\n  return `${start} - ${end}`;\n});\n\nconst combined = formatted.join(', ');\n\nreturn [\n  {\n    json: {\n      availableSlots: combined\n    }\n  }\n];\n"
      },
      "id": "e251820b-a867-4ed7-8365-b4228044ab38",
      "name": "avail slots",
      "type": "n8n-nodes-base.code",
      "position": [
        864,
        288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "af65c6c8-31c7-4f27-a073-cf7f72079882",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.Blocked }}",
              "rightValue": "Blocked"
            }
          ]
        },
        "options": {}
      },
      "id": "935d503e-6e54-4aab-91da-3969535034e7",
      "name": "blocked?",
      "type": "n8n-nodes-base.if",
      "position": [
        624,
        464
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f1270be8-1d11-4086-8bc0-ae53c99507c1",
              "name": "start",
              "type": "string",
              "value": "={{ $json.start }}"
            },
            {
              "id": "1a5f24ff-7d0c-436d-bb0b-015fc0c85cb7",
              "name": "end",
              "type": "string",
              "value": "={{ $json.end }}"
            },
            {
              "id": "befe6645-c0c1-40eb-9ba6-eccf2a762247",
              "name": "Blocked",
              "type": "string",
              "value": "Blocked"
            }
          ]
        },
        "options": {}
      },
      "id": "3972cf5c-f9b8-499e-a4f5-809c9cb5b02a",
      "name": "block slot",
      "type": "n8n-nodes-base.set",
      "position": [
        192,
        288
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "const slots = [];\nconst slotMinutes = 30;\nconst timeZone = 'America/Denver';\nconst businessStartHour = 9;\nconst businessEndHour = 17;\n\n// Get offset like -06:00 or -07:00\nfunction getOffset(date) {\n  const options = { timeZone, timeZoneName: 'short' };\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\n  const tz = parts.find(p => p.type === 'timeZoneName')?.value || 'EST';\n  return tz.includes('MDT') ? '-06:00' : '-07:00';\n}\n\n// Format Date as ISO with tz offset\nfunction formatToISO(date) {\n  const formatter = new Intl.DateTimeFormat('en-CA', {\n    timeZone,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  });\n\n  const parts = formatter.formatToParts(date).reduce((acc, part) => {\n    if (part.type !== 'literal') acc[part.type] = part.value;\n    return acc;\n  }, {});\n\n  const offset = getOffset(date);\n  return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${offset}`;\n}\n\n// Convert a Date to the hour/minute of its tz time\nfunction getTimeParts(date) {\n  const formatter = new Intl.DateTimeFormat('en-US', {\n    timeZone,\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false,\n  });\n  const [hourStr, minStr] = formatter.format(date).split(':');\n  return { hour: parseInt(hourStr), minute: parseInt(minStr) };\n}\n\nconst now = new Date();\nconst endDate = new Date(now);\nendDate.setDate(now.getDate() + 7);\n\n// Set current time to 24 hours in the future\nconst current = new Date(now);\ncurrent.setHours(current.getHours() + 24);\n\n// Round to the next 30-minute block in  time\nconst { minute } = getTimeParts(current);\nif (minute < 30) {\n  current.setMinutes(30, 0, 0);\n} else {\n  current.setHours(current.getHours() + 1);\n  current.setMinutes(0, 0, 0);\n}\n\n// Generate 30-minute blocks only during business hours & weekdays\nwhile (current < endDate) {\n  const dayOfWeek = current.getDay(); // 0 = Sunday, 6 = Saturday\n\n  // Skip weekends\n  if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n    const { hour } = getTimeParts(current);\n\n    if (hour >= businessStartHour && hour < businessEndHour) {\n      const start = new Date(current);\n      const end = new Date(start);\n      end.setMinutes(start.getMinutes() + slotMinutes);\n\n      slots.push({\n        start: formatToISO(start),\n        end: formatToISO(end),\n      });\n    }\n  }\n\n  current.setMinutes(current.getMinutes() + slotMinutes);\n}\n\nreturn slots.map(slot => ({ json: slot }));\n"
      },
      "id": "ac5e728c-a740-4950-b323-446b3e76abb9",
      "name": "possible slots",
      "type": "n8n-nodes-base.code",
      "position": [
        -144,
        480
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const events = items.map(item => item.json);\nconst intervalMinutes = 30;\nconst timeZone = 'America/Denver';\n\nfunction formatToEastern(date) {\n  const tzDate = new Intl.DateTimeFormat('en-US', {\n    timeZone,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false\n  }).formatToParts(date).reduce((acc, part) => {\n    if (part.type !== 'literal') acc[part.type] = part.value;\n    return acc;\n  }, {});\n\n  const offset = getEasternOffset(date);\n  return `${tzDate.year}-${tzDate.month}-${tzDate.day}T${tzDate.hour}:${tzDate.minute}:${tzDate.second}${offset}`;\n}\n\nfunction getEasternOffset(date) {\n  const options = { timeZone, timeZoneName: 'short' };\n  const parts = new Intl.DateTimeFormat('en-US', options).formatToParts(date);\n  const tzName = parts.find(p => p.type === 'timeZoneName').value;\n  return tzName.includes('MDT') ? '-06:00' : '-07:00';\n}\n\nfunction alignToPreviousSlot(date) {\n  const aligned = new Date(date);\n  const minutes = aligned.getMinutes();\n  aligned.setMinutes(minutes < 30 ? 0 : 30, 0, 0);\n  return aligned;\n}\n\nfunction alignToNextSlot(date) {\n  const aligned = new Date(date);\n  const minutes = aligned.getMinutes();\n  if (minutes > 0 && minutes <= 30) {\n    aligned.setMinutes(30, 0, 0);\n  } else if (minutes > 30) {\n    aligned.setHours(aligned.getHours() + 1);\n    aligned.setMinutes(0, 0, 0);\n  } else {\n    aligned.setMinutes(0, 0, 0);\n  }\n  return aligned;\n}\n\nconst splitEventIntoETBlocks = (event) => {\n  const blocks = [];\n\n  let current = alignToPreviousSlot(new Date(event.start.dateTime));\n  const eventEnd = alignToNextSlot(new Date(event.end.dateTime));\n\n  while (current < eventEnd) {\n    const blockEnd = new Date(current);\n    blockEnd.setMinutes(current.getMinutes() + intervalMinutes);\n\n    blocks.push({\n      start: formatToEastern(current),\n      end: formatToEastern(blockEnd)\n    });\n\n    current = blockEnd;\n  }\n\n  return blocks;\n};\n\nlet allBlocks = [];\nfor (const event of events) {\n  if (event.start?.dateTime && event.end?.dateTime) {\n    const blocks = splitEventIntoETBlocks(event);\n    allBlocks = allBlocks.concat(blocks);\n  }\n}\n\nreturn allBlocks.map(block => ({ json: block }));\n"
      },
      "id": "42300ee8-7c1e-4b2c-8c75-f40002f277b0",
      "name": "busy slots",
      "type": "n8n-nodes-base.code",
      "position": [
        0,
        288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "start, end",
        "joinMode": "enrichInput2",
        "options": {}
      },
      "id": "c19d9b93-95f0-4b05-b790-1e757e3d5abe",
      "name": "possible - busy",
      "type": "n8n-nodes-base.merge",
      "position": [
        432,
        464
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "DateString"
            },
            {
              "name": "TimeString"
            },
            {
              "name": "ZoneOffset"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -384,
        288
      ],
      "id": "498f4349-e356-4840-9ba4-0c9abc736202",
      "name": "start"
    }
  ],
  "pinData": {},
  "repo_name": "backup",
  "repo_owner": "tonyfelice",
  "repo_path": "n8/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-18T19:01:44.486Z",
      "updatedAt": "2025-08-18T19:01:44.486Z",
      "role": "workflow:owner",
      "workflowId": "dH9CyWINP2rSoYgH",
      "projectId": "7oc82U5FbxHgMZLy"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-20T00:54:13.241Z",
      "updatedAt": "2025-08-20T00:54:13.241Z",
      "id": "BhMyF8l07FgXl3Oi",
      "name": "pre-prod"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-14T18:57:00.000Z",
  "versionId": "60b4f3ff-a05d-42a3-a4d8-3556f9ef7562"
}