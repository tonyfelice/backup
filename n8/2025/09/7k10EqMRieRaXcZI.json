{
  "active": false,
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "cesium-info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "model": {
      "ai_languageModel": [
        [
          {
            "node": "cesium-info",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "list sources": {
      "ai_tool": [
        [
          {
            "node": "cesium-info",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get docs": {
      "ai_tool": [
        [
          {
            "node": "cesium-info",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get rows": {
      "ai_tool": [
        [
          {
            "node": "cesium-info",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-16T22:28:53.564Z",
  "id": "7k10EqMRieRaXcZI",
  "isArchived": false,
  "meta": null,
  "name": "CZM: RAG Agent",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"query\": \"description of the information requested\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "a5f088ee-b0ad-43de-bb9b-dab98db97ff6",
      "name": "start"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# SCENARIO\n\nYou are the executive assistant to the founder of Cesium, a full-service digital agency.\n\nYou will be asked to help answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them.\n\n## IMPORTANT\n+ When referring to Cesium, **always use first-person plural** pronouns `we`, `our`, `ours`.\n  - 👤 Customer: \"What is Cesium?\"\n  - ✅ Good: \"We are a full-service digital agency.\"\n  - ❌ Bad:  \"Cesium is a full-service digital agency.\"\n\n+ ***NEVER*** emit third-person plurals `they`, `them`, `their`, or `theirs`.\n  - 👤 Customer: \"What is the link to Cesium's privacy policy?\"\n  - ✅ Good: \"Our privacy policy is available at https://czm.ai/policies/privacy-policy\"\n  - ❌ Bad:  \"Their privacy policy is available at https://czm.ai/policies/privacy-policy\""
        }
      },
      "id": "cfe680ea-cfb7-4ac4-9287-e41c6ff78135",
      "name": "cesium-info",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        432,
        0
      ]
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "399c8964-1974-443d-97f7-82bfee88775a",
      "name": "model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        288,
        272
      ],
      "credentials": {
        "openAiApi": {
          "id": "X3Nhu6EWyz9LN2fj",
          "name": "czm-openai"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        432,
        272
      ],
      "id": "9d74c4f9-d7e8-406f-8d8e-07a6c79ea503",
      "name": "list sources",
      "credentials": {
        "postgres": {
          "id": "guTwPkmtJ3Y9kRpY",
          "name": "hosted supabase czm"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(text, ' ') as document_text\nFROM documents_pg\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        576,
        272
      ],
      "id": "1e2707da-52f1-4c1c-9355-679d62a039e5",
      "name": "get docs",
      "credentials": {
        "postgres": {
          "id": "guTwPkmtJ3Y9kRpY",
          "name": "hosted supabase czm"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID you are querying. dataset_id is the file_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        720,
        272
      ],
      "id": "5def4b9b-9489-42f0-95da-97e7b27b78d4",
      "name": "get rows",
      "credentials": {
        "postgres": {
          "id": "guTwPkmtJ3Y9kRpY",
          "name": "hosted supabase czm"
        }
      }
    }
  ],
  "pinData": {
    "start": [
      {
        "json": {
          "query": "What is cesium's position on privacy?"
        }
      }
    ]
  },
  "repo_name": "backup",
  "repo_owner": "tonyfelice",
  "repo_path": "n8/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-16T22:28:53.580Z",
      "updatedAt": "2025-09-16T22:28:53.580Z",
      "role": "workflow:owner",
      "workflowId": "7k10EqMRieRaXcZI",
      "projectId": "7oc82U5FbxHgMZLy"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-17T23:59:40.815Z",
      "updatedAt": "2025-08-17T23:59:40.815Z",
      "id": "3xekQCysfg8WeVyP",
      "name": "production"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-17T19:51:02.000Z",
  "versionId": "ec623309-58da-4dea-af43-939e8f94204a"
}