{
  "active": false,
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get logs": {
      "main": [
        [
          {
            "node": "logs?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "existing?": {
      "main": [
        [
          {
            "node": "sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "type": {
      "main": [
        [
          {
            "node": "existing?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "getContactByVid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sort": {
      "main": [
        [
          {
            "node": "format",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "hs record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gemini": {
      "ai_languageModel": [
        [
          {
            "node": "summarize",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "group logs": {
      "main": [
        [
          {
            "node": "summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getContactByVid": {
      "main": [
        [
          {
            "node": "valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "valid?": {
      "main": [
        [
          {
            "node": "hs record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "bad vid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "hs record": {
      "main": [
        [
          {
            "node": "get logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format": {
      "main": [
        [
          {
            "node": "no history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "logs?": {
      "main": [
        [
          {
            "node": "no history",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "group logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "summarize": {
      "main": [
        [
          {
            "node": "history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-14T03:39:57.374Z",
  "id": "4hTSiCXO71wygi9v",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "CZM: contact history 2.0",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"vid\": \"a string containing a number\"\n  ,\"sessionId\": \"a string containing a uuid\"\n  ,\"email\": \"user@casesensitive.com\"\n  ,\"caller\": \"name of the workflow making the request\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -528,
        -128
      ],
      "id": "10b2ff5e-4699-4287-846f-27dfcb46432c",
      "name": "start"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "n8n_chat_log",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "sessionId",
              "condition": "eq",
              "keyValue": "={{ $json.record[0].properties.chatsessionid.value }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        784,
        -128
      ],
      "id": "20e4c0b3-60b6-4d44-a887-09884ab34ba9",
      "name": "get logs",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "UseJTnYu3ytNk9xR",
          "name": "CZM supabase"
        }
      }
    },
    {
      "parameters": {
        "authentication": "appToken",
        "email": "={{ $json.email }}",
        "additionalFields": {
          "customPropertiesUi": {
            "customPropertiesValues": [
              {
                "property": "chatsessionid",
                "value": "={{ $json.sessionId }}"
              }
            ]
          }
        },
        "options": {
          "resolveData": false
        }
      },
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2.2,
      "position": [
        16,
        -384
      ],
      "id": "710e6043-f9d8-415c-b5d0-358025e05ed2",
      "name": "existing?",
      "credentials": {
        "hubspotAppToken": {
          "id": "A3jVCBPswcrKdgIE",
          "name": "hs-czm-n8n"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a4ce6650-6da4-485f-bb57-99a7a4ac7306",
                    "leftValue": "={{ /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test($json.email) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "email"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ Number.isFinite(Number($json.vid === null ? NaN : $json.vid)) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c436591c-e454-48c6-9429-7e53bf4d6d75"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "vid"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -336,
        -128
      ],
      "id": "0fb0d39d-014f-44ae-94b1-13f673e9b15e",
      "name": "type"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isNew }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c436591c-e454-48c6-9429-7e53bf4d6d75"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "NEW"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a4ce6650-6da4-485f-bb57-99a7a4ac7306",
                    "leftValue": "={{ $json.isNew }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "EXISTING"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        208,
        -384
      ],
      "id": "d8023eca-704a-4652-9fc8-be5538284ad1",
      "name": "sort"
    },
    {
      "parameters": {
        "authentication": "appToken",
        "operation": "get",
        "contactId": {
          "__rl": true,
          "value": "={{ $json.vid }}",
          "mode": "id"
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2.2,
      "position": [
        16,
        -112
      ],
      "id": "b385d5cd-a15c-4fa5-9889-fc3b778bb462",
      "name": "getContactByVid",
      "credentials": {
        "hubspotAppToken": {
          "id": "A3jVCBPswcrKdgIE",
          "name": "hs-czm-n8n"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1392,
        96
      ],
      "id": "44b0495e-c5f3-49ac-9f79-4555c703ca7f",
      "name": "gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "l2BRSEsuoKcYMydD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "history",
        "include": "specifiedFields",
        "fieldsToInclude": "created_at, chatInput, response, files, workflow",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1200,
        -112
      ],
      "id": "0341c739-ff6e-40e9-a5cd-40421539f7a8",
      "name": "group logs",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ Number.isFinite(Number($json.vid === null ? NaN : $json.vid)) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c436591c-e454-48c6-9429-7e53bf4d6d75"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "vid"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a4ce6650-6da4-485f-bb57-99a7a4ac7306",
                    "leftValue": "={{ $json.error || null }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "404"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        208,
        -112
      ],
      "id": "ad35cecb-c144-4f5e-9ef9-52580944da28",
      "name": "valid?"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "record",
        "include": "specifiedFields",
        "fieldsToInclude": "vid, properties",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        592,
        -128
      ],
      "id": "4bcc1833-6de1-46a6-ab98-b8913e50903d",
      "name": "hs record",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {\n    \"firstname\": null\n    ,\"Email\": \"{{ $('existing?').item.json.properties.email.value }}\"\n    ,\"vid\": {{ $('existing?').item.json.vid }}\n    ,\"chatHistory\": \"No history for this email address. Is there another address they may have used?\"\n    ,\"requestType\": null\n    ,\"urgency\": null\n    ,\"confidence\": null\n    ,\"value\": null\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        -400
      ],
      "id": "9030af81-e365-4498-8b03-b8601511a9e0",
      "name": "format"
    },
    {
      "parameters": {
        "jsCode": "const strOut = \"ERROR: No history for this address. Try a different email address.\";\nreturn [{ json: { output: String(strOut) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -400
      ],
      "id": "03ab5da9-a674-4853-81f9-fcbb2df07f95",
      "name": "no history"
    },
    {
      "parameters": {
        "jsCode": "const objOut = $('summarize').first().json.output;\nconst regex = /^\\\"?CZM:\\s([a-zA-Z0-9\\s]+)\\s[0-9]+\\.[0-9]\\\"?/;\nconst workflowsValue = objOut.workflows;\nconst lastWorkflow = objOut.lastWorkflow;\nconst agentMap = {\n  \"capture\": \"Nīla\",\n  \"discovery\": \"Celeste\",\n  \"accounts\": \"Cassandra\"\n};\nlet workflowsArray;\nif (typeof workflowsValue === 'string') {\n  try {\n    workflowsArray = JSON.parse(workflowsValue);\n  } catch (e) {\n    workflowsArray = [workflowsValue];\n  }\n} else if (Array.isArray(workflowsValue)) {\n  workflowsArray = workflowsValue;\n} else {\n  workflowsArray = [workflowsValue].filter(v => typeof v === 'string');\n}\nobjOut.workflows = workflowsArray;\nobjOut.spokenWith = workflowsArray.map(item =>\n  item.replace(regex, (match, capturedName) => agentMap[capturedName.trim()] || match)\n);\nobjOut.lastSpokeWith = objOut.lastWorkflow.replace(regex, (match, capturedName) => agentMap[capturedName.trim()] || match);\nobjOut.needsIntroduction = workflowsArray.some(item => item !== $('start').first().json.caller);\n\nreturn [{ json: { output: objOut } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        -112
      ],
      "id": "ea2a2b18-4de1-4006-b856-f3c6b86d91fc",
      "name": "history"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ Object.keys($json).length === 0 }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c436591c-e454-48c6-9429-7e53bf4d6d75"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no logs"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a4ce6650-6da4-485f-bb57-99a7a4ac7306",
                    "leftValue": "={{ Object.keys($json).length === 0 }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "logs"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        992,
        -128
      ],
      "id": "80c0ba8f-39d9-41a6-a847-b0438dcdd284",
      "name": "logs?"
    },
    {
      "parameters": {
        "jsCode": "const strOut = \"ERROR: Record not found; invalid vid value. Try a different email address.\";\nreturn [{ json: { output: String(strOut) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        144
      ],
      "id": "a60971ed-eb66-46a2-a468-6ae5b578f30e",
      "name": "bad vid"
    },
    {
      "parameters": {
        "text": "={{ JSON.stringify($json.history) }}",
        "attributes": {
          "attributes": [
            {
              "name": "summary",
              "description": "summary of the entire chat history"
            },
            {
              "name": "requestType",
              "description": "the type of request, positioned in the context of a full-service digital agency (strategy, design, development, campaign, maintenance, etc)"
            },
            {
              "name": "urgency",
              "description": "how important does this seem to the user? Scale of 1-10"
            },
            {
              "name": "confidence",
              "description": "does the user seem to have the ability and willingness to follow through? Scale of 1-10"
            },
            {
              "name": "value",
              "description": "how valuable of a project does this seem to be?   Scale of 1-10 (assume 4 hours is rated 1, 100+ is rated 7, 500+ hours is rated 9)"
            },
            {
              "name": "lastUpdateSummary",
              "description": "what was the last client-side project-related information the user shared? Disregard questions from the user, contact information, friendly banter, and chit-chat."
            },
            {
              "name": "lastUpdateDateTime",
              "description": "When was the most recent conversation? Output in America/Denver Time"
            },
            {
              "name": "workflows",
              "description": "=JSON array of distinct workflow values found in the logs"
            },
            {
              "name": "firstname",
              "description": "={{  $('hs record').first().json.record[0].properties.firstname.value }}"
            },
            {
              "name": "email",
              "description": "={{ $('hs record').first().json.record[0].properties.email.value }}"
            },
            {
              "name": "vid",
              "type": "number",
              "description": "={{ $('hs record').first().json.record[0].vid }}"
            },
            {
              "name": "lastWorkflow",
              "description": "workflow value from the most recent interaction"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        1392,
        -112
      ],
      "id": "efcd4ca6-8c8a-4208-b18d-9b7468f7f6a6",
      "name": "summarize"
    }
  ],
  "pinData": {},
  "repo_name": "backup",
  "repo_owner": "tonyfelice",
  "repo_path": "n8/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-14T03:39:57.379Z",
      "updatedAt": "2025-09-14T03:39:57.379Z",
      "role": "workflow:owner",
      "workflowId": "4hTSiCXO71wygi9v",
      "projectId": "7oc82U5FbxHgMZLy"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-17T23:59:40.815Z",
      "updatedAt": "2025-08-17T23:59:40.815Z",
      "id": "3xekQCysfg8WeVyP",
      "name": "production"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-30T17:06:22.000Z",
  "versionId": "c52aa9a4-6612-43b5-bb6d-fdfaf0411efb"
}